-- C:\ISE\PIL-KEY-SEARCH
-- VHDL Annotation Test Bench created by
-- HDL Bencher 5.1i
-- Tue Aug 19 14:06:20 2003

LIBRARY  IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

LIBRARY ieee;
USE IEEE.STD_LOGIC_TEXTIO.ALL;
USE STD.TEXTIO.ALL;

ENTITY testbench IS
END testbench;

ARCHITECTURE testbench_arch OF testbench IS
-- If you get a compiler error on the following line,
-- from the menu do Options->Configuration select VHDL 87
FILE RESULTS: TEXT OPEN WRITE_MODE IS "c:\ise\pil-key-search\decrypt_a5_tbw.ano";
	COMPONENT decrypt
		PORT (
			trial_key : in  std_logic_vector (63 DOWNTO 0);
			run : in  std_logic;
			ptext : out  std_logic_vector (63 DOWNTO 0);
			ctext : in  std_logic_vector (63 DOWNTO 0);
			clk : in  std_logic
		);
	END COMPONENT;

	SIGNAL trial_key : std_logic_vector (63 DOWNTO 0);
	SIGNAL run : std_logic;
	SIGNAL ptext : std_logic_vector (63 DOWNTO 0);
	SIGNAL ctext : std_logic_vector (63 DOWNTO 0);
	SIGNAL clk : std_logic;

BEGIN
	UUT : decrypt
	PORT MAP (
		trial_key => trial_key,
		run => run,
		ptext => ptext,
		ctext => ctext,
		clk => clk
	);

	PROCESS -- clock process for clk,
		VARIABLE TX_TIME : INTEGER :=0;

		PROCEDURE ANNOTATE_ptext(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",ptext,"));
			write(TX_LOC, ptext);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

	BEGIN
		CLOCK_LOOP : LOOP
		clk <= transport '0';
		WAIT FOR 2 ns;
		TX_TIME := TX_TIME + 2;
		clk <= transport '1';
		WAIT FOR 2 ns;
		TX_TIME := TX_TIME + 2;
		ANNOTATE_ptext(TX_TIME);
		WAIT FOR 3 ns;
		TX_TIME := TX_TIME + 3;
		clk <= transport '0';
		WAIT FOR 3 ns;
		TX_TIME := TX_TIME + 3;
		END LOOP CLOCK_LOOP;
	END PROCESS;

	PROCESS   -- Process for clk
		VARIABLE TX_OUT : LINE;

		BEGIN
		-- --------------------
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001001011"); --117CBF6597C9DA4B
		run <= transport '1';
		ctext <= transport std_logic_vector'("0000000000000000000000000000000000000000000000000000000000000000"); --0
		-- --------------------
		WAIT FOR 10 ns; -- Time=10 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001001100"); --117CBF6597C9DA4C
		-- --------------------
		WAIT FOR 10 ns; -- Time=20 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001001101"); --117CBF6597C9DA4D
		-- --------------------
		WAIT FOR 10 ns; -- Time=30 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001001110"); --117CBF6597C9DA4E
		-- --------------------
		WAIT FOR 10 ns; -- Time=40 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001001111"); --117CBF6597C9DA4F
		-- --------------------
		WAIT FOR 10 ns; -- Time=50 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010000"); --117CBF6597C9DA50
		-- --------------------
		WAIT FOR 10 ns; -- Time=60 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010001"); --117CBF6597C9DA51
		-- --------------------
		WAIT FOR 10 ns; -- Time=70 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010010"); --117CBF6597C9DA52
		-- --------------------
		WAIT FOR 10 ns; -- Time=80 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010011"); --117CBF6597C9DA53
		-- --------------------
		WAIT FOR 10 ns; -- Time=90 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010100"); --117CBF6597C9DA54
		-- --------------------
		WAIT FOR 10 ns; -- Time=100 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010101"); --117CBF6597C9DA55
		-- --------------------
		WAIT FOR 10 ns; -- Time=110 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010110"); --117CBF6597C9DA56
		-- --------------------
		WAIT FOR 10 ns; -- Time=120 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001010111"); --117CBF6597C9DA57
		-- --------------------
		WAIT FOR 10 ns; -- Time=130 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011000"); --117CBF6597C9DA58
		-- --------------------
		WAIT FOR 10 ns; -- Time=140 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011001"); --117CBF6597C9DA59
		-- --------------------
		WAIT FOR 10 ns; -- Time=150 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011010"); --117CBF6597C9DA5A
		-- --------------------
		WAIT FOR 10 ns; -- Time=160 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011011"); --117CBF6597C9DA5B
		-- --------------------
		WAIT FOR 10 ns; -- Time=170 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011100"); --117CBF6597C9DA5C
		-- --------------------
		WAIT FOR 10 ns; -- Time=180 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011101"); --117CBF6597C9DA5D
		-- --------------------
		WAIT FOR 10 ns; -- Time=190 ns
		trial_key <= transport std_logic_vector'("0001000101111100101111110110010110010111110010011101101001011110"); --117CBF6597C9DA5E
		-- --------------------
		WAIT FOR 12 ns; -- Time=202 ns
		-- --------------------

		write(TX_OUT, string'("Total[]"));
		writeline(results, TX_OUT);
		ASSERT (FALSE) REPORT
			"Success! Simulation for annotation completed"
			SEVERITY FAILURE;
	END PROCESS;
END testbench_arch;

CONFIGURATION decrypt_cfg OF testbench IS
	FOR testbench_arch
	END FOR;
END decrypt_cfg;
